# Credit for this workflow to Burntsushi and the contributors of Ripgrep.
# https://github.com/BurntSushi/ripgrep/blob/16a1221fc70d586a07bd0421722635c61df525be/.github/workflows/release.yml
# Their comments are prefixed with "> ".

# > The way this works is a little weird. But basically, the create-release job
# > runs purely to initialize the GitHub release itself. Once done, the upload
# > URL of the release is saved as an artifact.
# >
# > The build-release job runs only once create-release is finished. It gets
# > the release upload URL by downloading the corresponding artifact (which was
# > uploaded by create-release). It then builds the release executables for each
# > supported platform and attaches them as release assets to the previously
# > created release.
# >
# > The key here is that we create the release only once.

name: release

on:
  push:
    tags:
    - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get the release version from the tag
        run: |
          echo "::set-env name=RELEASE_VERSION::${GITHUB_REF#refs/tags/}"
          echo "version is: ${{ env.RELEASE_VERSION }}"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          release_name: ${{ env.RELEASE_VERSION }}
          draft: false
          prerelease: false

      - name: Create artifacts dir
        run: mkdir artifacts

      - name: Save release upload URL to artifact
        run: echo "${{ steps.create_release.outputs.upload_url }}" > artifacts/release-upload-url

      - name: Save version number to artifact
        run: echo "${{ env.RELEASE_VERSION }}" > artifacts/release-version

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: artifacts
          path: artifacts

  build-release:
    name: build-release
    needs: ['create-release']
    runs-on: ${{ matrix.os }}
    env:
      # > For some builds, use cross
      CARGO: cargo
      # > When CARGO is set to CROSS, this is set to `--target matrix.target`.
      TARGET_FLAGS: ""
      # > When CARGO is set to CROSS, TARGET_DIR includes matrix.target.
      TARGET_DIR: ./target
      # > Emit backtraces on panics.
      RUST_BACKTRACE: 1
    strategy:
      matrix:
        include:
          - name: linux-x86_64
            os: ubuntu-18.04
            target: x86_64-unknown-linux-gnu
          - name: linux-x86_64-musl
            os: ubuntu-18.04
            target: x86_64-unknown-linux-musl
          - name: linux-arm
            os: ubuntu-18.04
            target: arm-unknown-linux-gnueabihf
          - name: macos-x86_64
            os: macos-10.15
            target: x86_64-apple-darwin
          - name: windows-x86_64-gnu
            os: windows-2019
            target: x86_64-pc-windows-gnu
          - name: windows-x86_64-msvc
            os: windows-2019
            target: x86_64-pc-windows-msvc

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Get release download URL
      uses: actions/download-artifact@v2
      with:
        name: artifacts
        path: artifacts

    - name: Set release upload URL and release version
      shell: bash
      run: |
        release_upload_url="$(cat artifacts/release-upload-url)"
        echo "::set-env name=RELEASE_UPLOAD_URL::$release_upload_url"
        echo "release upload url: $RELEASE_UPLOAD_URL"
        release_version="$(cat artifacts/release-version)"
        echo "::set-env name=RELEASE_VERSION::$release_version"
        echo "release version: $RELEASE_VERSION"

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
        target: ${{ matrix.target }}

    - name: Use Cross
      if: matrix.os == 'ubuntu-18.04'
      run: |
        cargo install cross
        echo "::set-env name=CARGO::cross"
        echo "::set-env name=TARGET_FLAGS::--target ${{ matrix.target }}"
        echo "::set-env name=TARGET_DIR::./target/${{ matrix.target }}"

    - name: Show command used for Cargo
      run: |
        echo "cargo is: ${{ env.CARGO }}"
        echo "target flag is: ${{ env.TARGET_FLAGS }}"
        echo "target dir is: ${{ env.TARGET_DIR }}"

    - name: Build release binary
      run: ${{ env.CARGO }} build --verbose --release ${{ env.TARGET_FLAGS }}

    - name: Strip release binary (linux and macos)
      if: matrix.target == 'x86_64-unknown-linux-gnu' || matrix.target == 'x86_64-unknown-linux-musl' || matrix.target == 'x86_64-apple-darwin'
      run: strip "${{ env.TARGET_DIR }}/release/renamer"

    - name: Strip release binary (arm)
      if: matrix.target == 'arm-unknown-linux-gnueabihf'
      run: |
        docker run --rm -v \
          "$PWD/target:/target:Z" \
          rustembedded/cross:arm-unknown-linux-gnueabihf \
          arm-linux-gnueabihf-strip \
          /target/arm-unknown-linux-gnueabihf/release/renamer

    - name: Organize output
      shell: bash
      run: |
        executable_name=renamer-${{ env.RELEASE_VERSION }}-${{ matrix.name }}

        if [ "${{ matrix.os }}" = "windows-2019" ]; then
          executable_path="${{ env.TARGET_DIR }}/release/renamer.exe"
          executable_name="${executable_name}.exe"
        else
          executable_path="${{ env.TARGET_DIR }}/release/renamer"
        fi

        echo "::set-env name=EXECUTABLE_PATH::$executable_path"
        echo "::set-env name=EXECUTABLE_NAME::$executable_name"

    - name: Upload release archive
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ env.RELEASE_UPLOAD_URL }}
        asset_path: ${{ env.EXECUTABLE_PATH }}
        asset_name: ${{ env.EXECUTABLE_NAME }}
        asset_content_type: application/octet-stream
